local bump = require 'bump'

local function box(l,t,w,h)
  return {l=l,t=t,w=w,h=h}
end

describe('World', function()
  describe('constructor', function()
    it('accepts two items, two boxes, and next l and t', function()
      local i1,i2,b1,b2 = {},{}, box(0,2,1,1), box(0,0,10,10)
      local c = bump.newCollision(i1,i2,b1,b2,5,0)
      assert.equal(c.item,  i1)
      assert.equal(c.other, i2)
      assert.equal(c.itemBox,  b1)
      assert.equal(c.otherBox, b2)
      assert.equal(c.vx, 5)
      assert.equal(c.vy, -2)
    end)
  end)

  describe(':resolve', function()
    describe('when item is static', function()
      describe('when itemBox does not intersect otherBox', function()
        it('returns nil', function()
          local c = bump.newCollision({},{},box(0,0,1,1), box(5,5,1,1), 0,0)
          assert.is_nil(c:resolve())
        end)
      end)
      describe('when itemBox intersects otherBox', function()
        it('returns intersection, sets the collision kind to "intersection", and ti to a negative value', function()
          local c = bump.newCollision({},{},box(0,0,7,6), box(5,5,1,1), 0, 0)
          assert.equal(c:resolve(), 'intersection')
          assert.equal(c.kind, 'intersection')
          assert.equal(c.ti, -2)
        end)
      end)
    end)

    describe('when item is moving', function()
      describe('when itemBox does not intersect otherBox', function()
        it('returns nil', function()
          local c = bump.newCollision({},{},box(0,0,1,1), box(5,5,1,1), 0,1)
          assert.is_nil(c:resolve())
        end)
      end)
      describe('when itemBox intersects otherBox', function()
        it('detects collisions from the left', function()
          local c = bump.newCollision({},{},box(1,1,1,1), box(5,0,1,1), 6,0)
          assert.equal(c:resolve(), 'tunnel')
          assert.equal(c.kind, 'tunnel')
          assert.equal(c.ti, 0.6)
          assert.equal(c.normal_x, -1)
          assert.equal(c.normal_y, 0)
        end)
        it('detects collisions from the right', function()
          local c = bump.newCollision({},{},box(6,0,1,1), box(1,0,1,1), 1,1)
          assert.equal(c:resolve(), 'tunnel')
          assert.equal(c.kind, 'tunnel')
          assert.equal(c.ti, 0.8)
          assert.equal(c.normal_x, 1)
          assert.equal(c.normal_y, 0)
        end)
        it('detects collisions from the top', function()
          local c = bump.newCollision({},{},box(0,0,1,1), box(0,4,1,1), 0,5)
          assert.equal(c:resolve(), 'tunnel')
          assert.equal(c.kind, 'tunnel')
          assert.equal(c.ti, 0.6)
          assert.equal(c.normal_x, 0)
          assert.equal(c.normal_y, -1)
        end)
        it('detects collisions from the bottom', function()
          local c = bump.newCollision({},{},box(0,4,1,1), box(0,0,1,1), 0,-1)
          assert.equal(c:resolve(), 'tunnel')
          assert.equal(c.kind, 'tunnel')
          assert.equal(c.ti, 0.6)
          assert.equal(c.normal_x, 0)
          assert.equal(c.normal_y, 1)
        end)
      end)
    end)
  end)
end)
